version: '3.8'

services:
  # Infrastructure services
  nats:
    image: nats:2.10.7-alpine
    command: "--jetstream --auth nats_test:password"
    ports:
      - "14222:4222"
    healthcheck:
      test: ["CMD", "nats-server", "check", "connection", "--host", "localhost", "--port", "4222"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redislabs/redisearch:latest
    ports:
      - "16379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  neo4j:
    image: neo4j:5.13.0
    ports:
      - "17474:7474" # HTTP
      - "17687:7687" # Bolt
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    healthcheck:
      test: ["CMD", "wget", "http://localhost:7474", "-O", "/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Mock Triton server for testing
  mock-triton:
    image: python:3.10-slim
    volumes:
      - ./mock_services/triton:/app
    command: ["python", "/app/mock_triton_server.py"]
    ports:
      - "18000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Application services
  ingestion-service:
    build:
      context: ../../microservices/rust/ingestion-service
      dockerfile: Dockerfile
    ports:
      - "18001:8001"
    environment:
      - PORT=8001
      - NATS_URL=nats://nats_test:password@nats:4222
      - LOG_LEVEL=debug
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  ml-orchestrator:
    build:
      context: ../../microservices/python/ml-orchestrator
      dockerfile: Dockerfile
    ports:
      - "18002:8002"
    environment:
      - PORT=8002
      - NATS_URL=nats://nats_test:password@nats:4222
      - TRITON_URL=http://mock-triton:8000
      - LOG_LEVEL=debug
    depends_on:
      nats:
        condition: service_healthy
      mock-triton:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  knowledge-graph:
    build:
      context: ../../microservices/python/knowledge-graph
      dockerfile: Dockerfile
    ports:
      - "18003:8003"
    environment:
      - PORT=8003
      - NATS_URL=nats://nats_test:password@nats:4222
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=testpassword
      - LOG_LEVEL=debug
    depends_on:
      nats:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  personalization-engine:
    build:
      context: ../../microservices/python/personalization-engine
      dockerfile: Dockerfile
    ports:
      - "18004:8002"
    environment:
      - PORT=8002
      - NATS_URL=nats://nats_test:password@nats:4222
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Test runner container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - ./:/tests
      - ./results:/results
    environment:
      - NATS_URL=nats://nats_test:password@nats:4222
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=testpassword
      - INGESTION_URL=http://ingestion-service:8001
      - ML_ORCHESTRATOR_URL=http://ml-orchestrator:8002
      - KNOWLEDGE_GRAPH_URL=http://knowledge-graph:8003
      - PERSONALIZATION_URL=http://personalization-engine:8002
    depends_on:
      ingestion-service:
        condition: service_healthy
      ml-orchestrator:
        condition: service_healthy
      knowledge-graph:
        condition: service_healthy
      personalization-engine:
        condition: service_healthy
    command: ["pytest", "-xvs", "--alluredir=/results"]
