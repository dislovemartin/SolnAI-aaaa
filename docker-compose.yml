version: '3.8'

networks:
  solnai-network:
    driver: bridge
    name: solnai-network

services:
  solnai:
    build:
      context: .
      dockerfile: Dockerfile
    image: solnai:24.08.07
    container_name: solnai
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    user: appuser  # Explicitly set the user to run as appuser
    ports:
      - "8000:8000" # Triton Server HTTP
      - "8001:8001" # Triton Server gRPC
      - "8002:8002" # Triton Server metrics
      - "8080:8080" # FastAPI
      - "9090:9090" # Prometheus metrics
      - "8084:8084" # LLM Router
      - "8100:8100" # AgentIQ UI
    volumes:
      - ./scripts:/app/scripts:ro
      - ./models:/app/models:cached # Mount models directory with cache optimization
      - nim-cache:/opt/nim/.cache # Persistent model cache
      - /tmp/.X11-unix:/tmp/.X11-unix # For any UI components that need display
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app/llm-router:/app/AgentIQ
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
      - LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - NATS_URL=nats://nats:4222
      # LLM Router Environment Variables
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      - LLM_ROUTER_PORT=8084
      # AgentIQ Environment Variables
      - AGENTIQ_PORT=8100
      - TRITON_SERVER_PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - solnai-network
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      nats:
        condition: service_started

  redis:
    image: redis:7.2-alpine
    container_name: solnai-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - solnai-network

  neo4j:
    image: neo4j:5.15-enterprise
    container_name: solnai-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - solnai-network

  nats:
    image: nats:2.10-alpine
    container_name: solnai-nats
    restart: unless-stopped
    ports:
      - "4222:4222"
    networks:
      - solnai-network

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: solnai-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - solnai-network

  grafana:
    image: grafana/grafana:10.2.3
    container_name: solnai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - solnai-network
    depends_on:
      - prometheus

volumes:
  nim-cache:
  redis-data:
  neo4j-data:
  neo4j-logs:
  prometheus-data:
  grafana-data:
